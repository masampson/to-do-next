import Head from "next/head";
import { useRouter } from "next/router";
import DoForm from "../components/DoForm/DoForm";
import DoTabs from "../components/DoTabs/DoTabs";
import DoItem from "../components/DoList/DoItem";
import styles from "../styles/Home.module.css";
import { useState } from "react";

const TABS_MAP = {
  All: () => true,
  Active: (item) => item.active,
  Done: (item) => !item.active,
  Kill: () => true,
};

const TABS_NAMES = Object.keys(TABS_MAP);

function Home(props) {
  const router = useRouter();
  const [toDoList, setToDoList] = useState(props.toDoList)
  const [filterState, setFilterState] = useState("All");

  // Functions
  async function addToDo(enteredItem) {
    const response = await fetch("/api/to-do-list", {
      method: "POST",
      body: JSON.stringify(enteredItem),
      headers: {
        "Content-Type": "application/json",
      },
    });

    console.log(enteredItem);

    const list = await response.json();

    console.log(list);

    router.push("/");
  }

  async function updateListItem(listItemId, isActive) {
    const response = await fetch("/api/to-do-list", {
      method: "PATCH",
      body: JSON.stringify({ listItemId, isActive }),
      headers: {
        "Content-Type": "application/json",
      },
    })

    const updatedItem = await response.json()
    const updatedToDoList = toDoList.map(listItem => {
      if (listItem._id === updatedItem._id) return updatedItem
      return listItem
    })

    setToDoList(updatedToDoList)
  }

  // const deleteItem = (itemId) => {
  //   setToDoList((prevItems) => {
  //     const newList = prevItems.filter((item) => item.id !== itemId);
  //     return newList;
  //   });
  // };

  // const deleteAllDone = () => {
  //   setToDoList((prevItems) => {
  //     const newList = prevItems.filter((item) => item.active === true);
  //     return newList;
  //   });
  // };

  // Component Lists
  const tabsList = TABS_NAMES.map((name) => (
    <DoTabs
      key={name}
      name={name}
      setFilterState={setFilterState}
      // deleteAllDone={deleteAllDone}
    />
  ));

  const itemsList = toDoList.filter(TABS_MAP[filterState]).map((item) => (
    <DoItem
      item={item.item}
      active={item.active}
      id={item._id}
      key={item._id}
      onActiveStateChange={updateListItem}
      // deleteItem={deleteItem}
    ></DoItem>
  ));

  let content = <p className={styles.placeholder}>List is empty</p>;

  if (props.toDoList.length > 0) {
    content = <ul className={styles["to-do-items"]}>{itemsList}</ul>;
  }

  // return
  return (
    <div className={styles.container}>
      <Head>
        <title>Do Did</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <main className={styles.main}>
        <div className={styles.pad}>
          <DoForm addToDo={addToDo}></DoForm>

          <div className={styles["tabs-container"]}>{tabsList}</div>

          <div>{content}</div>
        </div>
      </main>
    </div>
  );
}

export async function getServerSideProps() {
  const response = await fetch(`${process.env.API_BASE_URL}/to-do-list`, {
    method: "GET",
    headers: {
      "Content-Type": "application/json",
    },
  });

  const toDoList = await response.json();

  return {
    props: {
      toDoList,
    },
  };
}

export default Home;
